{"version":3,"sources":["components/appBar.tsx","actions/index.ts","actions/sections.ts","operations/sections.ts","components/addSectionButton.tsx","components/taskCard.tsx","components/taskSectionCard.tsx","components/main.tsx","components/app.tsx","serviceWorker.ts","stores/initialState.ts","reducers/sections.ts","stores/index.ts","index.tsx"],"names":["AppBar","Box","sx","flexGrow","position","Toolbar","Typography","variant","component","ACTION_TYPE","ADD_SECTION","INPUT_SECTION_NAME","ADD_CARD","DELETE_CARD","INPUT_TASK_CARD_NAME","INPUT_TASK_CONTENT","DRAG_HAPPENED","shortid","require","SortAction","sections","type","payload","SortSectonTasksAndTasks","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","dispatch","getState","taskSectionId","replace","tasks","filter","section","map","push","draggedTaskCard","splice","newSections","indexOf","taskSectionStartId","taskSectionEndId","sourceTasks","destinationTasks","draggedSection","AddSectionButton","useDispatch","Button","color","minWidth","mt","mx","onClick","generate","taskSectionName","taskId","taskName","taskContent","TaskCard","props","useState","inputButtonState","setInputButtonState","checkButtonState","setCheckButtonState","starButtonState","setStarButtonState","onInput","onCheck","onStar","useSelector","state","task","onDeleteTaskCard","onInputTaskCardName","event","inputName","target","value","onInputTaskContent","inputContent","index","provided","draggableProps","dragHandleProps","ref","innerRef","Card","p","mb","CardContent","TextField","size","placeholder","onChange","undefined","defaultValue","onBlur","display","justifyContent","IconButton","style","backgroundColor","TaskSectionCard","onInputSectionName","onAddTaskCard","droppableId","droppableProps","width","m","pb","height","padding","alignItems","overflow","Main","onDragEnd","result","source","destination","direction","App","Fragment","Boolean","window","location","hostname","match","initialSectionState","SectionsReducer","action","filteredTasks","newTasks","rootReducer","combineReducers","Store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d35588a9.chunk.js","sourcesContent":["import { Box, Toolbar, Typography } from \"@mui/material\";\nimport MuiAppBar from \"@mui/material/AppBar\";\n\nconst AppBar = () => {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <MuiAppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Task Management App\n          </Typography>\n        </Toolbar>\n      </MuiAppBar>\n    </Box>\n  );\n};\n\nexport default AppBar;\n","const ACTION_TYPE = {\n  ADD_SECTION: \"ADD_SECTION\",\n  INPUT_SECTION_NAME: \"INPUT_SECTION_NAME\",\n  ADD_CARD: \"ADD_CARD\",\n  DELETE_CARD: \"DELETE_CARD\",\n  INPUT_TASK_CARD_NAME: \"INPUT_TASK_CARD_NAME\",\n  INPUT_TASK_CONTENT: \"INPUT_TASK_CONTENT\",\n  DRAG_HAPPENED: \"DRAG_HAPPENED\",\n} as const;\n\nexport default ACTION_TYPE;\n","import { SectionsType, TaskSection } from \"../types/index\";\nimport ACTION_TYPE from \"./index\";\n\nconst shortid = require(\"shortid\");\n\nexport const AddSectionAction = (): SectionsType[\"action\"] => {\n  return {\n    type: ACTION_TYPE.ADD_SECTION,\n    payload: {\n      sections: [\n        {\n          taskSectionId: shortid.generate(),\n          taskSectionName: \"\",\n          tasks: [\n            {\n              taskId: shortid.generate(),\n              taskName: \"\",\n              taskContent: \"\",\n            },\n          ],\n        },\n      ],\n    },\n  };\n};\n\nexport const InputSectionNameAction = (taskSectionId: string, inputName: string): SectionsType[\"action\"] => {\n  return {\n    type: ACTION_TYPE.INPUT_SECTION_NAME,\n    payload: {\n      sections: [\n        {\n          taskSectionId: taskSectionId,\n          taskSectionName: inputName,\n          tasks: [],\n        },\n      ],\n    },\n  };\n};\n\nexport const AddTaskCardAction = (taskSectionId: string): SectionsType[\"action\"] => {\n  return {\n    type: ACTION_TYPE.ADD_CARD,\n    payload: {\n      sections: [\n        {\n          taskSectionId: taskSectionId,\n          taskSectionName: \"\",\n          tasks: [\n            {\n              taskId: shortid.generate(),\n              taskName: \"\",\n              taskContent: \"\",\n            },\n          ],\n        },\n      ],\n    },\n  };\n};\n\nexport const DeleteTaskCardAction = (taskSectionId: string, taskId: string): SectionsType[\"action\"] => {\n  return {\n    type: ACTION_TYPE.DELETE_CARD,\n    payload: {\n      sections: [\n        {\n          taskSectionId: taskSectionId,\n          taskSectionName: \"\",\n          tasks: [\n            {\n              taskId: taskId,\n              taskName: \"\",\n              taskContent: \"\",\n            },\n          ],\n        },\n      ],\n    },\n  };\n};\n\nexport const InputTaskCardNameAction = (\n  taskSectionId: string,\n  taskId: string,\n  inputName: string\n): SectionsType[\"action\"] => {\n  return {\n    type: ACTION_TYPE.INPUT_TASK_CARD_NAME,\n    payload: {\n      sections: [\n        {\n          taskSectionId: taskSectionId,\n          taskSectionName: \"\",\n          tasks: [\n            {\n              taskId: taskId,\n              taskName: inputName,\n              taskContent: \"\",\n            },\n          ],\n        },\n      ],\n    },\n  };\n};\n\nexport const InputTaskContentAction = (\n  taskSectionId: string,\n  taskId: string,\n  inputContent: string\n): SectionsType[\"action\"] => {\n  return {\n    type: ACTION_TYPE.INPUT_TASK_CONTENT,\n    payload: {\n      sections: [\n        {\n          taskSectionId: taskSectionId,\n          taskSectionName: \"\",\n          tasks: [\n            {\n              taskId: taskId,\n              taskName: \"\",\n              taskContent: inputContent,\n            },\n          ],\n        },\n      ],\n    },\n  };\n};\n\nexport const SortAction = (sections: TaskSection[]): SectionsType[\"action\"] => {\n  return {\n    type: ACTION_TYPE.DRAG_HAPPENED,\n    payload: {\n      sections: sections,\n    },\n  };\n};\n","import { Dispatch } from \"react\";\nimport { SortAction } from \"../actions/sections\";\nimport { RootState } from \"../stores\";\nimport { SectionsType, Task, TaskSection } from \"../types\";\n\nconst SortSectonTasksAndTasks = (\n  droppableIdStart: string,\n  droppableIdEnd: string,\n  droppableIndexStart: number,\n  droppableIndexEnd: number,\n  draggableId: string,\n  type: string\n) => {\n  return (dispatch: Dispatch<SectionsType[\"action\"]>, getState: () => RootState) => {\n    const sections = getState().sections[\"sections\"];\n\n    // in the same list\n    if (droppableIdStart === droppableIdEnd) {\n      const taskSectionId = droppableIdStart.replace(\"droppable-\", \"\");\n      let tasks: Task[] = [];\n      sections\n        .filter((section: TaskSection) => section.taskSectionId === taskSectionId)\n        .map((section: TaskSection) => tasks.push(...section.tasks));\n      const draggedTaskCard = tasks.splice(droppableIndexStart, 1);\n      tasks.splice(droppableIndexEnd, 0, ...draggedTaskCard);\n      const newSections = sections.map((section: TaskSection) => {\n        if (section.taskSectionId === taskSectionId) {\n          section.tasks = tasks;\n        }\n        return section;\n      });\n      return dispatch(SortAction(newSections));\n    }\n    // other list\n    else {\n      // taskCard\n      if (draggableId.indexOf(\"draggable-task-card\") === 0) {\n        const taskSectionStartId = droppableIdStart.replace(\"droppable-\", \"\");\n        const taskSectionEndId = droppableIdEnd.replace(\"droppable-\", \"\");\n        let sourceTasks: Task[] = [];\n        sections\n          .filter((section: TaskSection) => section.taskSectionId === taskSectionStartId)\n          .map((section: TaskSection) => sourceTasks.push(...section.tasks));\n        const draggedTaskCard = sourceTasks.splice(droppableIndexStart, 1);\n        let destinationTasks: Task[] = [];\n        sections\n          .filter((section: TaskSection) => section.taskSectionId === taskSectionEndId)\n          .map((section: TaskSection) => destinationTasks.push(...section.tasks));\n        destinationTasks.splice(droppableIndexEnd, 0, ...draggedTaskCard);\n        const newSections = sections.map((section: TaskSection) => {\n          if (section.taskSectionId === taskSectionStartId) {\n            section.tasks = sourceTasks;\n          } else if (section.taskSectionId === taskSectionEndId) {\n            section.tasks = destinationTasks;\n          }\n          return section;\n        });\n        return dispatch(SortAction(newSections));\n      } else if (draggableId.indexOf(\"draggable-task-section\") === 0) {\n        const draggedSection = sections.splice(droppableIndexStart, 1);\n        sections.splice(droppableIndexEnd, 0, ...draggedSection);\n        return dispatch(SortAction(sections));\n      }\n    }\n    dispatch(SortAction(sections));\n  };\n};\n\nexport default SortSectonTasksAndTasks;\n","import { Button } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\nimport { AddSectionAction } from \"../actions/sections\";\n\nconst AddSectionButton = () => {\n  const dispatch = useDispatch();\n  const onAddSection = () => {\n    dispatch(AddSectionAction());\n  };\n  return (\n    <Button color=\"inherit\" variant=\"contained\" sx={{ minWidth: 135, mt: 2, mx: 1 }} onClick={onAddSection}>\n      ADD SECTION\n    </Button>\n  );\n};\n\nexport default AddSectionButton;\n","import Input from \"@mui/icons-material/Input\";\nimport Star from \"@mui/icons-material/Star\";\nimport Check from \"@mui/icons-material/Check\";\nimport DeleteTwoToneIcon from \"@mui/icons-material/DeleteTwoTone\";\nimport { Box, Card, CardContent, IconButton, TextField, Typography } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { DeleteTaskCardAction, InputTaskCardNameAction, InputTaskContentAction } from \"../actions/sections\";\nimport React, { useState } from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { RootState } from \"../stores\";\nimport { Task, TaskSection } from \"../types\";\n\ninterface Props {\n  taskSectionId: string;\n  taskSectionName: string;\n  taskId: string;\n  index: number;\n}\n\nconst TaskCard = (props: Props) => {\n  const [inputButtonState, setInputButtonState] = useState(false);\n  const [checkButtonState, setCheckButtonState] = useState(false);\n  const [starButtonState, setStarButtonState] = useState(false);\n\n  const onInput = () => {\n    setInputButtonState(!inputButtonState);\n  };\n  const onCheck = () => {\n    setCheckButtonState(!checkButtonState);\n  };\n  const onStar = () => {\n    setStarButtonState(!starButtonState);\n  };\n\n  let tasks: Task[] = [];\n  useSelector((state: RootState) => state.sections[\"sections\"]).map((section: TaskSection) => {\n    if (section.taskSectionId === props.taskSectionId) {\n      section.tasks.map((task: Task) => {\n        if (task.taskId === props.taskId) {\n          tasks.push(task);\n        }\n        return task;\n      });\n    }\n    return section;\n  });\n\n  const dispatch = useDispatch();\n  const onDeleteTaskCard = () => {\n    dispatch(DeleteTaskCardAction(props.taskSectionId, props.taskId));\n  };\n\n  const onInputTaskCardName = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    dispatch(InputTaskCardNameAction(props.taskSectionId, props.taskId, event.target.value));\n  };\n\n  const onInputTaskContent = (event: React.FocusEvent<HTMLTextAreaElement>) => {\n    dispatch(InputTaskContentAction(props.taskSectionId, props.taskId, event.target.value));\n    setInputButtonState(false);\n  };\n\n  return (\n    <Draggable\n      key={`draggable-task-card-${props.taskId}`}\n      draggableId={`draggable-task-card-${props.taskId}`}\n      index={props.index}\n    >\n      {(provided) => (\n        <div {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\n          <Card sx={{ p: 0, mb: 1 }}>\n            <CardContent>\n              <TextField\n                variant=\"standard\"\n                size=\"small\"\n                placeholder=\"Task Name\"\n                value={tasks[0].taskName}\n                onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => onInputTaskCardName(event)}\n              />\n              <Typography sx={{ mt: 2 }} color=\"#808080\">\n                Section Name\n                {props.taskSectionName === \"\" ? \"\" : `: ${props.taskSectionName}`}\n              </Typography>\n              {!inputButtonState ? (\n                <Typography sx={{ mt: 2 }} color=\"#808080\">\n                  {tasks[0].taskContent}\n                </Typography>\n              ) : undefined}\n              {inputButtonState ? (\n                <TextField\n                  variant=\"outlined\"\n                  defaultValue={tasks[0].taskContent}\n                  onBlur={(event: React.FocusEvent<HTMLTextAreaElement>) => onInputTaskContent(event)}\n                />\n              ) : undefined}\n              <Box sx={{ display: \"inline-flex\", justifyContent: \"flex-end\" }}>\n                <IconButton color={inputButtonState ? \"success\" : \"default\"} onClick={onInput}>\n                  <Input />\n                </IconButton>\n                <IconButton\n                  color={checkButtonState ? \"success\" : \"default\"}\n                  style={{\n                    backgroundColor: checkButtonState ? \"#DDDDDD\" : \"transparent\",\n                  }}\n                  onClick={onCheck}\n                >\n                  <Check />\n                </IconButton>\n                <IconButton\n                  color={starButtonState ? \"success\" : \"default\"}\n                  style={{\n                    backgroundColor: starButtonState ? \"#DDDDDD\" : \"transparent\",\n                  }}\n                  onClick={onStar}\n                >\n                  <Star />\n                </IconButton>\n                <IconButton onClick={onDeleteTaskCard}>\n                  <DeleteTwoToneIcon />\n                </IconButton>\n              </Box>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport default TaskCard;\n","import { Button, Card, CardContent, TextField } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport TaskCard from \"./taskCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"../stores\";\nimport { TaskSection, Task } from \"../types\";\nimport { AddTaskCardAction, InputSectionNameAction } from \"../actions/sections\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\n\ninterface Props {\n  taskSectionId: string;\n  taskSectionName: string;\n  index: number;\n}\n\nconst TaskSectionCard = (props: Props) => {\n  let tasks: Task[] = [];\n  useSelector((state: RootState) => state.sections[\"sections\"])\n    .filter((section: TaskSection) => section.taskSectionId === props.taskSectionId)\n    .map((section: TaskSection) => section.tasks.map((task: Task) => tasks.push(task)));\n\n  const dispatch = useDispatch();\n  const onInputSectionName = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    dispatch(InputSectionNameAction(props.taskSectionId, event.target.value));\n  };\n\n  const onAddTaskCard = () => {\n    dispatch(AddTaskCardAction(props.taskSectionId));\n  };\n\n  return (\n    <Draggable\n      key={`draggable-task-section-${props.taskSectionId}`}\n      draggableId={`draggable-task-section-${props.taskSectionId}`}\n      index={props.index}\n    >\n      {(provided) => (\n        <div {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\n          <Droppable\n            key={`droppable-task-card-${props.taskSectionId}`}\n            droppableId={`droppable-${props.taskSectionId}`}\n            type=\"taskCards\"\n          >\n            {(provided) => (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                <Card sx={{ width: 250, m: 1 }}>\n                  <CardContent sx={{ pb: 2 }}>\n                    <Card sx={{ height: 55, p: 0, mb: 1 }}>\n                      <CardContent>\n                        <TextField\n                          variant=\"standard\"\n                          size=\"small\"\n                          placeholder=\"Section Name\"\n                          onChange={(event: React.ChangeEvent<HTMLTextAreaElement>) => onInputSectionName(event)}\n                        />\n                      </CardContent>\n                    </Card>\n                    {tasks.map((task: Task, index: number) => (\n                      <TaskCard\n                        key={task.taskId}\n                        taskSectionId={props.taskSectionId}\n                        taskSectionName={props.taskSectionName}\n                        taskId={task.taskId}\n                        index={index}\n                      />\n                    ))}\n                    <Button sx={{ m: 0, p: 0 }} onClick={onAddTaskCard}>\n                      <AddIcon />\n                    </Button>\n                  </CardContent>\n                </Card>\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport default TaskSectionCard;\n","import { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SortSectonTasksAndTasks from \"../operations/sections\";\nimport { RootState } from \"../stores\";\nimport { TaskSection } from \"../types\";\nimport AddSectionButton from \"./addSectionButton\";\nimport TaskSectionCard from \"./taskSectionCard\";\n\nconst style = {\n  padding: 20,\n  display: \"flex\",\n  alignItems: \"flex-start\",\n  overflow: \"auto\",\n};\n\nconst Main = () => {\n  const dispatch = useDispatch();\n  const sections = useSelector((state: RootState) => state.sections[\"sections\"]);\n  const onDragEnd = (result: DropResult) => {\n    dispatch(\n      SortSectonTasksAndTasks(\n        result.source.droppableId,\n        result.destination!.droppableId,\n        result.source.index,\n        result.destination!.index,\n        result.draggableId,\n        result.type\n      )\n    );\n  };\n\n  return (\n    <DragDropContext key={\"main\"} onDragEnd={(result: DropResult) => onDragEnd(result)}>\n      <div style={style}>\n        {sections.map((section: TaskSection, index: number) => (\n          <Droppable\n            key={`droppable-task-section-${section.taskSectionId}`}\n            droppableId={`droppable-task-section-${section.taskSectionId}`}\n            direction=\"horizontal\"\n            type=\"sections\"\n          >\n            {(provided) => (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                <TaskSectionCard\n                  key={section.taskSectionId}\n                  taskSectionId={section.taskSectionId}\n                  taskSectionName={section.taskSectionName}\n                  index={index}\n                />\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        ))}\n        <AddSectionButton />\n      </div>\n    </DragDropContext>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport AppBar from \"./appBar\";\nimport Main from \"./main\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <AppBar />\n      <Main />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SectionsType } from \"../types/index\";\n\nexport const initialSectionState: SectionsType[\"state\"] = {\n  sections: [],\n};\n","import { initialSectionState } from \"../stores/initialState\";\nimport { SectionsType, Task, TaskSection } from \"../types/index\";\n\nconst SectionsReducer = (state = initialSectionState, action: SectionsType[\"action\"]): SectionsType[\"state\"] => {\n  switch (action.type) {\n    case \"ADD_SECTION\":\n      return {\n        ...state,\n        sections: [...state.sections, action.payload.sections[0]],\n      };\n\n    case \"INPUT_SECTION_NAME\":\n      state.sections\n        .filter((section: TaskSection) => section.taskSectionId === action.payload.sections[0].taskSectionId)\n        .map((section: TaskSection) => (section.taskSectionName = action.payload.sections[0].taskSectionName));\n      return {\n        ...state,\n        sections: [...state.sections],\n      };\n\n    case \"ADD_CARD\":\n      state.sections\n        .filter((section: TaskSection) => section.taskSectionId === action.payload.sections[0].taskSectionId)\n        .map((section: TaskSection) => section.tasks.push(action.payload.sections[0].tasks[0]));\n      return {\n        ...state,\n        sections: [...state.sections],\n      };\n\n    case \"DELETE_CARD\":\n      state.sections.map((section: TaskSection) => {\n        if (section.taskSectionId === action.payload.sections[0].taskSectionId) {\n          const filteredTasks = section.tasks.filter(\n            (task: Task) => task.taskId !== action.payload.sections[0].tasks[0].taskId\n          );\n          section.tasks = filteredTasks;\n        }\n        return section;\n      });\n\n      return {\n        ...state,\n        sections: [...state.sections],\n      };\n\n    case \"INPUT_TASK_CARD_NAME\":\n      state.sections.map((section: TaskSection) => {\n        if (section.taskSectionId === action.payload.sections[0].taskSectionId) {\n          const newTasks: Task[] = section.tasks.map((task: Task) => {\n            if (task.taskId === action.payload.sections[0].tasks[0].taskId) {\n              task.taskName = action.payload.sections[0].tasks[0].taskName;\n            }\n            return task;\n          });\n          section.tasks = newTasks;\n        }\n        return section;\n      });\n\n      return {\n        ...state,\n        sections: [...state.sections],\n      };\n\n    case \"INPUT_TASK_CONTENT\":\n      state.sections.map((section: TaskSection) => {\n        if (section.taskSectionId === action.payload.sections[0].taskSectionId) {\n          const newTasks: Task[] = section.tasks.map((task: Task) => {\n            if (task.taskId === action.payload.sections[0].tasks[0].taskId) {\n              task.taskContent = action.payload.sections[0].tasks[0].taskContent;\n            }\n            return task;\n          });\n          section.tasks = newTasks;\n        }\n        return section;\n      });\n\n      return {\n        ...state,\n        sections: [...state.sections],\n      };\n\n    case \"DRAG_HAPPENED\":\n      state.sections = action.payload.sections;\n      return {\n        ...state,\n        sections: [...state.sections],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default SectionsReducer;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport SectionsReducer from \"../reducers/sections\";\n\nconst rootReducer = combineReducers({\n  sections: SectionsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport const Store = createStore(rootReducer, applyMiddleware(thunk));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Store } from \"./stores/index\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}